; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define MyAppName "WiseFlasher"
#define MyAppVersion GetStringFileInfo("WiseFlasher.exe", "ProductVersion")
#define MyAppPublisher "Wiseconn IP GMBH"
#define MyAppURL "https://www.wiseconn.com"
#define MyAppExeName "WiseFlasher.exe"
#define VersionFile "1.1.0.0"
#define Copyright "Copyright © 2024 Wiseconn IP GMBH"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{2CC4E3DF-9124-425D-8771-B6074CF515DA}
AppName={#MyAppName}
SignTool=signtool
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\Wiseconn\{#MyAppName}
DefaultGroupName=\Wiseconn\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=\bin\Release
OutputBaseFilename=WiseFlasher_setup
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
VersionInfoVersion={#VersionFile}
AppCopyright={#Copyright}
RestartApplications=False

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "bin\Release\WiseFlasher.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "bin\Release\devices.ini"; DestDir: "{app}"; Flags: ignoreversion
Source: "bin\Release\olidev.ini"; DestDir: "{app}"; Flags: ignoreversion
Source: "bin\Release\Olimex\FTD2XX.dll"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\help.chm"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\HIL.dll"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\MSP430.dll"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\mspprog-cli-v2.exe"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\olidev.ini"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\olimex.dll"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\settings.ini"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\SiUSBXp.dll"; DestDir: "{app}\Olimex"; Flags: ignoreversion
Source: "bin\Release\Olimex\Drivers\*"; DestDir: "{app}\Olimex\Drivers"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\TI\CDC.log"; DestDir: "{app}\TI"; Flags: ignoreversion
;Source: "TI\Firmware.txt"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\HIL.dll"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\License.txt"; DestDir: "{app}\TI"; Flags: ignoreversion
;Source: "TI\MSP_Flasher_Software_Manifest.pdf"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\MSP430.dll"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\MSP430Flasher.exe"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\ti_msp430driver_setup_1.0.1.2.exe"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\MSPFlasher-1.3.20-windows-installer.exe"; DestDir: "{app}\TI"; Flags: ignoreversion
;Source: "TI\Program MSP430 (example).bat"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\TI\README.txt"; DestDir: "{app}\TI"; Flags: ignoreversion
Source: "bin\Release\WinSparkleDotNet.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "bin\Release\WinSparkle.dll"; DestDir: "{app}"; Flags: ignoreversion;  Check: IsWin64()
Source: "bin\Release\Win32\WinSparkle.dll"; DestDir: "{app}"; Flags: ignoreversion;  Check: not IsWin64()
Source: "bin\Release\HardwareHelperLib.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "bin\Release\ST-LINK Utility\*"; DestDir: "{app}\ST-LINK Utility"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "bin\Release\J-Link\*"; DestDir: "{app}\J-Link"; Flags: ignoreversion recursesubdirs createallsubdirs

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\ST-LINK Utility\setup.exe";  StatusMsg: "Installing ST-LINK Utility"; Check: Check_STLink()
Filename: "{app}\TI\ti_msp430driver_setup_1.0.1.2.exe";  StatusMsg: "Installing MSP430 Driver"; Check: Check_MSP430Driver()
Filename: "{app}\TI\MSPFlasher-1.3.20-windows-installer.exe";  StatusMsg: "Installing MSP430Flasher"; Check: Check_MSP430Flasher()
Filename: "{app}\J-Link\JLink_Windows_V784a_x86_64.exe";  StatusMsg: "Installing J-Link"; Check: Check_JLink()
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent runascurrentuser

[Dirs]
Name: "{app}\Log"
Name: "{app}\Log_Olimex"
Name: "{app}\Olimex"
Name: "{app}\Olimex\Drivers"
Name: "{app}\TI"
Name: "{app}\Log_ST"
Name: "{app}\ST-LINK Utility"
Name: "{app}\J-Link"
Name: "{app}\Log_J-LINK"

[Messages]
FinishedLabel=Setup has finished installing [name] on your computer. The application may be launched by selecting the installed shortcuts.%n%nDrivers for Olimex programmer are installed in folder: .../WiseFlasher/Olimex/Drivers.%n%nDrivers for ST programmer are installed in folder: .../WiseFlasher/ST-LINK Utility/ST-LINK_USB_V2_1_Driver%n%nDrivers for J-Link programmer are installed in folder: .../WiseFlasher/J-Link/USBriver.%n%nWhen you connect the JTAG programmer the first time, select install from a specific location in New Hardware Wizard and select the drivers folder.

[CustomMessages]
english.NewerVersionExists=A newer version of {#MyAppName} is already installed.%n%nInstaller version: {#MyAppVersion}%nCurrent version: 

[Code]
function GetHKLM: Integer;
begin
  if IsWin64 then
    Result := HKLM32
  else
    Result := HKLM;
end;

function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  Log('The sUnInstPath is: ' + sUnInstPath);
  if not RegQueryStringValue(GetHKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;



function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    Log('The sUnInstallString is: ' + sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;


function CompareVersion(V1, V2: string): Integer;
var
  P, N1, N2: Integer;
begin
  Result := 0;
  while (Result = 0) and ((V1 <> '') or (V2 <> '')) do
  begin
    P := Pos('.', V1);
    if P > 0 then
    begin
      N1 := StrToInt(Copy(V1, 1, P - 1));
      Delete(V1, 1, P);
    end
      else
    if V1 <> '' then
    begin
      N1 := StrToInt(V1);
      V1 := '';
    end
      else
    begin
      N1 := 0;
    end;

    P := Pos('.', V2);
    if P > 0 then
    begin
      N2 := StrToInt(Copy(V2, 1, P - 1));
      Delete(V2, 1, P);
    end
      else
    if V2 <> '' then
    begin
      N2 := StrToInt(V2);
      V2 := '';
    end
      else
    begin
      N2 := 0;
    end;

    if N1 < N2 then Result := -1
      else
    if N1 > N2 then Result := 1;
  end;
end;



function InitializeSetup: Boolean;
var Version: String;
var sInstPath: String;
begin
  sInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  if RegValueExists(GetHKLM,sInstPath, 'DisplayVersion') then
    begin
      RegQueryStringValue(GetHKLM,sInstPath, 'DisplayVersion', Version);
      if (CompareVersion(Version,'{#MyAppVersion}')=1) then
        begin
          MsgBox(ExpandConstant('{cm:NewerVersionExists} '+Version), mbInformation, MB_OK);
          Result := False;
        end
      else
        begin
          UnInstallOldVersion();
          Result := True;
        end
    end
  else
    begin
      Result := True;
    end
end;


function Check_JLink: Boolean;
var Version: Cardinal;
begin
  if RegValueExists(HKEY_CURRENT_USER,'SOFTWARE\SEGGER\J-Link', 'CurrentVersion') then
    begin
      RegQueryDWordValue(HKEY_CURRENT_USER,'SOFTWARE\SEGGER\J-Link', 'CurrentVersion', Version);
      Log('The J-Link Version is: ' + IntToStr(Version));
      if  (Version = 78401)  then
        begin
          Result := False;
        end
      else
        begin
          Result := True;
        end
    end
  else
    begin
      Result := True;
    end
end;

function Check_STLink: Boolean;
var Version: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE,'Software\Microsoft\Windows\CurrentVersion\Uninstall\{73420588-B21B-420F-9E64-AD114422C9FE}', 'DisplayVersion') then
    begin
      RegQueryStringValue(HKEY_LOCAL_MACHINE,'Software\Microsoft\Windows\CurrentVersion\Uninstall\{73420588-B21B-420F-9E64-AD114422C9FE}', 'DisplayVersion', Version);
      Log('The ST-Link Version is: ' + Version);
      if  (CompareVersion(Version,'4.6.0.0')>=0)  then
        begin
          Result := False;
        end
      else
        begin
          Result := True;
        end
    end
  else
    begin
      Result := True;
    end
end;

function Check_MSP430Flasher: Boolean;
var Version: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE,'SOFTWARE\WOW6432Node\Texas Instruments Inc.\MSP Flasher', 'Version') then
    begin
      RegQueryStringValue(HKEY_LOCAL_MACHINE,'SOFTWARE\WOW6432Node\Texas Instruments Inc.\MSP Flasher', 'Version', Version);
      Log('The MSP430Flasher Version is: ' + Version);
      if  (CompareVersion(Version,'1.3.20')>=0)  then
        begin
          Result := False;
        end
      else
        begin
          Result := True;
        end
    end
  else
    begin
      Result := True;
    end
end;

function Check_MSP430Driver: Boolean;
var Version: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE,'SOFTWARE\WOW6432Node\Texas Instruments\MSP430 Flash Emulation Driver Installer', 'Version') then
    begin
      RegQueryStringValue(HKEY_LOCAL_MACHINE,'SOFTWARE\WOW6432Node\Texas Instruments\MSP430 Flash Emulation Driver Installer', 'Version', Version);
      Log('The MSP430 Driver Version is: ' + Version);
      if  (CompareVersion(Version,'1.0.1.2')>=0)  then
        begin
          Result := False;
        end
      else
        begin
          Result := True;
        end
    end
  else
    begin
      Result := True;
    end
end;

